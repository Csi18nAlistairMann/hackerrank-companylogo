1. I used a really odd construction with the dict and a list, which a more 
    experienced python programmer probably wouldn't. Never the less, it comes 
    up with the right results. 
    If that "wasn't the way you're were wanted to solve it" then that's on the
    client for not specifying which way clearly enough!

2. spaghetti.py uses "SHOW_NUM_RESULTS" as a constant. Were the requirements to 
    change to four entries, for example, just changing that constant would be 
    sufficient. No hunting through the code.

3. No sanitising of user input was asked for, or gets done. In real life, you'd 
    want to make sure that what turns up matches the constraints - or give an 
    error. Why? https://xkcd.com/327/

4. I don't really like the "intermediate" name. It feels like intermediate1 
    would be more honestly named unsortableData and intermediate2 named 
    sortableIndexes. 

5. I kinda don't like that spaghetti.py has intermediate1 and 2 at the top 
    level. Surely they could be hidden in a function somewhere? This could 
    possibly be achieved with an array where the first element is intermediate1,
    and the second intermediate2. Then they could both be returned from a
    subroutine in one go, instead of two. That would be helpful to someone
    wanting to use a module - one call is better than two calls.

6. 10^4 smells like a trap! That's 10,000 characters - I wonder why they chose 
    that limit? Using random.org I created a 10,032 character input - which 
    worked just fine. 

7. doProcessing() - what an awful name! It'd be more meaningful to call it
    something like getSortDatastoreIndexes().

8. countThenAlphabeticSortPair2() is also poorly named. "detectPairSorted()"

9. countThenAlphabeticSort2() likewise! "sortListUsingDict()" maybe.

10. I used eight searches for code people had already written. A comment 
    "I cheated ... " indicates where!
